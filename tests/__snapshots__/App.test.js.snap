// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> renders correctly 1`] = `
<PaperProvider
  theme={
    Object {
      "animation": Object {
        "scale": 1,
      },
      "colors": Object {
        "accent": "#03dac4",
        "backdrop": "rgba(0, 0, 0, 0.5)",
        "background": "#f6f6f6",
        "disabled": "rgba(0, 0, 0, 0.26)",
        "error": "#B00020",
        "notification": "#f50057",
        "onSurface": "#000000",
        "placeholder": "rgba(0, 0, 0, 0.54)",
        "primary": "#6200ee",
        "surface": "#ffffff",
        "text": "#000000",
      },
      "dark": false,
      "dialog": Object {
        "margin": "5%",
      },
      "fonts": Object {
        "light": Object {
          "fontFamily": "System",
          "fontWeight": "300",
        },
        "medium": Object {
          "fontFamily": "System",
          "fontWeight": "500",
        },
        "regular": Object {
          "fontFamily": "System",
          "fontWeight": "400",
        },
        "thin": Object {
          "fontFamily": "System",
          "fontWeight": "100",
        },
      },
      "roundness": 4,
      "spacing": Object {
        "medium": "5%",
        "small": "1%",
      },
    }
  }
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNCSafeAreaProvider
      onInsetsChange={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        pointerEvents="box-none"
        style={
          Object {
            "zIndex": 1,
          }
        }
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            pointerEvents="box-none"
            style={
              Object {
                "bottom": 0,
                "left": 0,
                "opacity": 1,
                "position": "absolute",
                "right": 0,
                "top": 0,
                "zIndex": 0,
              }
            }
          >
            <View
              style={
                Object {
                  "backgroundColor": "rgb(255, 255, 255)",
                  "borderBottomColor": "rgb(216, 216, 216)",
                  "flex": 1,
                  "shadowColor": "rgb(216, 216, 216)",
                  "shadowOffset": Object {
                    "height": 0.5,
                    "width": 0,
                  },
                  "shadowOpacity": 0.85,
                  "shadowRadius": 0,
                }
              }
            />
          </View>
          <View
            pointerEvents="box-none"
            style={
              Object {
                "height": 64,
                "maxHeight": undefined,
                "minHeight": undefined,
                "opacity": undefined,
                "transform": undefined,
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 20,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                  "justifyContent": "center",
                }
              }
            >
              <View
                pointerEvents="box-none"
                style={
                  Object {
                    "marginHorizontal": 16,
                    "opacity": 1,
                  }
                }
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgb(28, 28, 30)",
                      "fontSize": 17,
                      "fontWeight": "600",
                    }
                  }
                >
                  Log
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          forwardedRef={[Function]}
          pointerEvents="box-none"
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              needsOffscreenAlphaCompositing={false}
              pointerEvents="box-none"
              style={
                Object {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  Object {
                    "flex": 1,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="none"
                  style={
                    Object {
                      "backgroundColor": "rgb(242, 242, 242)",
                      "bottom": 0,
                      "left": 0,
                      "position": "absolute",
                      "shadowColor": "#000",
                      "shadowOffset": Object {
                        "height": 1,
                        "width": -1,
                      },
                      "shadowOpacity": 0.3,
                      "shadowRadius": 5,
                      "top": 0,
                      "width": 3,
                    }
                  }
                />
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <RCTScrollView>
                        <View>
                          <View
                            elevation={4}
                            style={
                              Object {
                                "backgroundColor": "#ffffff",
                                "margin": "5%",
                                "padding": "5%",
                                "shadowColor": "#000000",
                                "shadowOffset": Object {
                                  "height": 3,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.24,
                                "shadowRadius": 4,
                              }
                            }
                          >
                            <View
                              style={
                                Object {
                                  "backgroundColor": "transparent",
                                  "borderColor": "transparent",
                                  "borderRadius": 4,
                                  "borderStyle": "solid",
                                  "borderWidth": 0,
                                  "elevation": 0,
                                  "minWidth": 64,
                                }
                              }
                            >
                              <View
                                accessibilityRole="button"
                                accessibilityState={
                                  Object {
                                    "disabled": undefined,
                                  }
                                }
                                accessible={true}
                                focusable={true}
                                onClick={[Function]}
                                onResponderGrant={[Function]}
                                onResponderMove={[Function]}
                                onResponderRelease={[Function]}
                                onResponderTerminate={[Function]}
                                onResponderTerminationRequest={[Function]}
                                onStartShouldSetResponder={[Function]}
                                style={
                                  Array [
                                    Object {
                                      "overflow": "hidden",
                                    },
                                    Object {
                                      "borderRadius": 4,
                                    },
                                  ]
                                }
                              >
                                <View
                                  style={
                                    Array [
                                      Object {
                                        "alignItems": "center",
                                        "flexDirection": "row",
                                        "justifyContent": "center",
                                      },
                                      undefined,
                                    ]
                                  }
                                >
                                  <Text
                                    numberOfLines={1}
                                    selectable={false}
                                    style={
                                      Array [
                                        Object {
                                          "color": "#000000",
                                          "fontFamily": "System",
                                          "fontWeight": "400",
                                        },
                                        Object {
                                          "textAlign": "left",
                                        },
                                        Array [
                                          Object {
                                            "letterSpacing": 1,
                                            "marginHorizontal": 16,
                                            "marginVertical": 9,
                                            "textAlign": "center",
                                          },
                                          undefined,
                                          Object {
                                            "textTransform": "uppercase",
                                          },
                                          Object {
                                            "color": "#6200ee",
                                            "fontFamily": "System",
                                            "fontWeight": "500",
                                          },
                                          Object {
                                            "fontFamily": "System",
                                            "fontWeight": "500",
                                          },
                                          undefined,
                                        ],
                                      ]
                                    }
                                  >
                                    Create new habit
                                  </Text>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </RCTScrollView>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </RNCSafeAreaProvider>
  </View>
</PaperProvider>
`;
